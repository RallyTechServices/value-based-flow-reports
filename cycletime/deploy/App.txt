<!DOCTYPE html>
<html>
<head>
    <title>Cycle Time</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Nov 23 2014 18:02:40 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Nov 23 2014 18:02:40 GMT-0800 (PST)";
        var CHECKSUM = 4761866718;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

/*
 * override the call to load the store so that users who don't have permissions
 * don't get locked out of seeing things they do have permissions for.
 * 
 */
Ext.override(Rally.ui.chart.Chart,{
    _loadStore: function (storeConfig, storeRank) {
        var self = this;

        Ext.merge(storeConfig, {
            exceptionHandler: function (proxy, response, operation) {
                if (response.status !== 200) {
                    self.queryValid = false;
                }

                if (response.status === 409) {
                    self.workspaceHalted = true;
                } else if (response.status === 503) {
                    self.serviceUnavailable = true;
                }
            }
        });

        storeConfig.limit = storeConfig.limit || Infinity;

        var store = Ext.create(this.storeType, storeConfig);
        store.rank = storeRank;

        store.on('load', this._storeLoadHandler, this);
        store.load({params: { removeUnauthorizedSnapshots: true } });
    }
});

Ext.define('CycleCalculator', {
    extend: 'Rally.data.lookback.calculator.BaseCalculator',
    initial_state: "In-Progress",
    final_state:"Accepted",
    group_field: 'ScheduleState',
    
    runCalculation: function(snapshots) {
        var final_state = this.final_state;
        var initial_state = this.initial_state;
        console.log(initial_state,final_state,snapshots);
        
        /* iterate over the snapshots (each of which represents a transition
         * 1.  Save the ones that are transitioning INTO the initial state in a hash by object id so that
         *     we can retrieve it for the cycle time
         * 2.  For the ones that are transitioning INTO the final state, find the _validfrom from the hash
         *     and calculate the cycle time
         *     
         */
         var starts_by_oid = {};
         Ext.Array.each(snapshots, function(snapshot){
            // _PreviousValues.ScheduleState == null means we got created right into the state
            // _PreviousValues.ScheduleState == undefined means this particular change wasn't a transition (so we'll look for > 0)
            // TODO: check for just after the initial_state?  skipping is a problem to solve.
            var state = snapshot[this.group_field];
            var previous_state = -1;
            
            // sometimes snapshots are missing the "_PreviousValues" hash. not sure why
            if ( snapshot._PreviousValues ) {
                previous_state = snapshot._PreviousValues[this.group_field];
            }
            console.log( state, previous_state );
            if (state == initial_state && ( previous_state === null || previous_state > 0 ) ) {
                starts_by_oid[snapshot.ObjectID] = snapshot;
            }
            
            if ( state == final_state && previous_state > 0  ) {
                if ( starts_by_oid[snapshot.ObjectID] ) { 
                    starts_by_oid[snapshot.ObjectID]._final_date = snapshot._ValidFrom;
                }
            }
         }, this);
         console.log("starts_by_oid", starts_by_oid);
        
         var snaps_by_date = this._getSnapsByFinalDate(starts_by_oid);
         console.log("Snaps_by_Date", snaps_by_date);
         
         var snaps_by_date_filled_in = this._orderAndFillDateHash(snaps_by_date);
         console.log("snaps_by_date_filled_in", snaps_by_date_filled_in);
         
         var cycle_times_by_date = this._getCycleTimes(snaps_by_date_filled_in);
         console.log("Cycle Times", cycle_times_by_date);
         
//        var data = [1,5,8,25];
//        var categories = [ "10/1", "10/2", "10/3", "10/4"];
         
         var data = [];
         var categories = [];
         Ext.Object.each( cycle_times_by_date, function(key_date, cycle_time){
            data.push(cycle_time);
            categories.push(key_date);
         });
        
        return {
            series: [
            {
                name: 'Average Cycle Time',
                data: data
            }],
            categories: categories
        }
    },
    _getSnapsByFinalDate: function(starts_by_oid) {
        var snaps_by_date = {};
        Ext.Object.each(starts_by_oid, function(oid, snapshot) {
            if ( snapshot._final_date ) {
                var key_date = snapshot._final_date;
                var short_date = snapshot._final_date.replace(/T.*$/,'');
                if ( ! snaps_by_date[short_date] ) {
                    snaps_by_date[short_date] = [];
                }
                snaps_by_date[short_date].push(snapshot);
            }
        });
        
        return snaps_by_date;
    },
    _getCycleTimes: function(snaps_by_date){
        var cycle_times_by_date = {};
        
        Ext.Object.each( snaps_by_date, function( key_date, snapshots ) {
            var time_array = [];
            Ext.Array.each(snapshots,function(snapshot){
                var begin_time = Rally.util.DateTime.fromIsoString(snapshot._ValidFrom);
                var end_time = Rally.util.DateTime.fromIsoString(snapshot._final_date);
                var cycle_time = Rally.util.DateTime.getDifference(end_time,begin_time,'day');
                time_array.push(cycle_time);
            });
            cycle_times_by_date[key_date] = Ext.Array.mean(time_array) || null;
        });
        
        return cycle_times_by_date;
    },
    _orderAndFillDateHash: function(snaps_by_date){
        // put existing keys in order:
        var filled_snaps = {};
       
        var keys = Ext.Object.getKeys(snaps_by_date);
        if ( keys.length > 0 ) {
            var min = Ext.Array.min(keys);
            var first_date = Rally.util.DateTime.fromIsoString(min);
            var today = new Date();
            
            var check_date = first_date;
            while( check_date < today ) {
                var iso_date = Rally.util.DateTime.toIsoString(check_date).replace(/T.*$/,"");
                filled_snaps[iso_date] = [];
                if ( snaps_by_date[iso_date] ) {
                    filled_snaps[iso_date] = snaps_by_date[iso_date];
                }
                check_date = Rally.util.DateTime.add(check_date,'day',1);
            }
        }
        return filled_snaps;
    }
});
Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    model: 'PortfolioItem/EPIC',
    group_field: 'State',
    items: [
        {xtype:'container',itemId:'selector_box', layout: { type:'hbox' }, defaults: { margin: 5 }},
        {xtype:'container',itemId:'display_box', margin: 10},
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this._addSelectors(this.down('#selector_box'));
    },
    _addSelectors: function(container){
        container.add({
            xtype:'rallyfieldvaluecombobox',
            model: this.model,
            field: this.group_field,
            labelWidth: 75,
            fieldLabel: 'Starting State',
            stateful: true,
            stateEvents: ['change'],
            stateId: 'rally.technicalservices.cycletime.start_value',
            listeners: {
                scope: this,
                change: function(combo) {
                    this.start_state = combo.getRecord();
                    this._enableButtonIfNecessary();
                }
            }
        });
        container.add({
            xtype:'rallyfieldvaluecombobox',
            model: this.model,
            field: this.group_field,
            labelWidth: 75,
            fieldLabel: 'Ending State',
            stateful: true,
            stateEvents: ['change'],
            stateId: 'rally.technicalservices.cycletime.end_value',
            listeners: {
                scope: this,
                change: function(combo) {
                    this.end_state = combo.getRecord();
                    this._enableButtonIfNecessary();
                }
            }
        });
        container.add({
            xtype:'rallybutton',
            text:'Calculate...',
            disabled: true,
            itemId: 'calculate_button',
            listeners: {
                scope:this,
                click:this._makeChart
            }
        });
    },
    _enableButtonIfNecessary: function() {
        this.logger.log("Start/End",this.start_state, this.end_state);
        this.down('#calculate_button').setDisabled(true);

        if ( this.end_state && this.start_state ) {
            var start_store = this.start_state.store;
            var end_store = this.end_state.store;
            this.logger.log("Indices of start/stop", start_store.indexOf(this.start_state), end_store.indexOf(this.end_state));
            if (start_store.indexOf(this.start_state) < end_store.indexOf(this.end_state)) {
                this.down('#calculate_button').setDisabled(false);
            }
        }
    },
    _makeChart: function(button){
        this.down('#display_box').removeAll();
        
        var project_oid = this.getContext().getProject().ObjectID;
        this.down('#display_box').add({
            xtype:'rallychart',
            storeConfig: {
                find: {
                    '_TypeHierarchy': this.model
                },
                fetch: ['ObjectID', this.group_field, '_ValidFrom', '_PreviousValues'],
                hydrate: [this.group_field],
                sort: { '_ValidFrom': 1 }
            },
            calculatorType: 'CycleCalculator',
            calculatorConfig: {
                initial_state: this.start_state.get('name'),
                final_state: this.end_state.get('name'),
                group_field: this.group_field
            },
            chartConfig: {
                chart: {
                    type: 'column'
                },
                title: {
                    text: 'Cycle Time'
                },
                
                xAxis: {
                    tickmarkPlacement: 'on',
                    tickInterval: 30,
                    title: {
                        text: 'Date Entered Final State'
                    }
                },
                yAxis: [{title:{text: 'Days'}}],
                plotOptions: {
                    series: {
                        marker: { enabled: false },
                        stacking: 'normal'
                    }
                }
                
            }
        });
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Cycle Time'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>